@implements IHandle<CounterIncremented>
@implements IHandle<DateTimeChanged>
@implements IDisposable

@inject IEventAggregator EventAggregator

@code {
  [Parameter]
  public EventCallback<int> OnCounterChanged { get; set; }

  [Parameter]
  public EventCallback<DateTime> OnDateChanged { get; set; }

  protected override void OnInitialized()
  {
    EventAggregator.Subscribe(this);
  }

  public void Dispose()
  {
    EventAggregator.Unsubscribe(this);
  }

  public async Task HandleAsync(CounterIncremented notification, CancellationToken cancellationToken)
  {
    await OnCounterChanged.InvokeAsync(notification.Counter);
  }

  public async Task HandleAsync(DateTimeChanged notification, CancellationToken cancellationToken)
  {
    await OnDateChanged.InvokeAsync(notification.CurrentDate);
  }
}
